[
    {
        "label": "PyPDFLoader",
        "importPath": "langchain.document_loaders",
        "description": "langchain.document_loaders",
        "isExtraImport": true,
        "detail": "langchain.document_loaders",
        "documentation": {}
    },
    {
        "label": "CharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "CharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "CharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "CohereEmbeddings",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "ChatCohere",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "CohereEmbeddings",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "ChatCohere",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "CohereEmbeddings",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "CohereEmbeddings",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "CohereEmbeddings",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "ChatCohere",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "ChatCohere",
        "importPath": "langchain_cohere",
        "description": "langchain_cohere",
        "isExtraImport": true,
        "detail": "langchain_cohere",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "hub",
        "importPath": "langchain",
        "description": "langchain",
        "isExtraImport": true,
        "detail": "langchain",
        "documentation": {}
    },
    {
        "label": "hub",
        "importPath": "langchain",
        "description": "langchain",
        "isExtraImport": true,
        "detail": "langchain",
        "documentation": {}
    },
    {
        "label": "hub",
        "importPath": "langchain",
        "description": "langchain",
        "isExtraImport": true,
        "detail": "langchain",
        "documentation": {}
    },
    {
        "label": "FAISS",
        "importPath": "langchain_community.vectorstores",
        "description": "langchain_community.vectorstores",
        "isExtraImport": true,
        "detail": "langchain_community.vectorstores",
        "documentation": {}
    },
    {
        "label": "create_stuff_documents_chain",
        "importPath": "langchain.chains.combine_documents",
        "description": "langchain.chains.combine_documents",
        "isExtraImport": true,
        "detail": "langchain.chains.combine_documents",
        "documentation": {}
    },
    {
        "label": "create_stuff_documents_chain",
        "importPath": "langchain.chains.combine_documents",
        "description": "langchain.chains.combine_documents",
        "isExtraImport": true,
        "detail": "langchain.chains.combine_documents",
        "documentation": {}
    },
    {
        "label": "create_stuff_documents_chain",
        "importPath": "langchain.chains.combine_documents",
        "description": "langchain.chains.combine_documents",
        "isExtraImport": true,
        "detail": "langchain.chains.combine_documents",
        "documentation": {}
    },
    {
        "label": "create_retrieval_chain",
        "importPath": "langchain.chains.retrieval",
        "description": "langchain.chains.retrieval",
        "isExtraImport": true,
        "detail": "langchain.chains.retrieval",
        "documentation": {}
    },
    {
        "label": "create_retrieval_chain",
        "importPath": "langchain.chains.retrieval",
        "description": "langchain.chains.retrieval",
        "isExtraImport": true,
        "detail": "langchain.chains.retrieval",
        "documentation": {}
    },
    {
        "label": "create_retrieval_chain",
        "importPath": "langchain.chains.retrieval",
        "description": "langchain.chains.retrieval",
        "isExtraImport": true,
        "detail": "langchain.chains.retrieval",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "langchain_pinecone",
        "description": "langchain_pinecone",
        "isExtraImport": true,
        "detail": "langchain_pinecone",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "langchain_pinecone",
        "description": "langchain_pinecone",
        "isExtraImport": true,
        "detail": "langchain_pinecone",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "langchain_pinecone",
        "description": "langchain_pinecone",
        "isExtraImport": true,
        "detail": "langchain_pinecone",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "langchain_pinecone",
        "description": "langchain_pinecone",
        "isExtraImport": true,
        "detail": "langchain_pinecone",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "langchain_pinecone",
        "description": "langchain_pinecone",
        "isExtraImport": true,
        "detail": "langchain_pinecone",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_history_aware_retriever",
        "importPath": "langchain.chains.history_aware_retriever",
        "description": "langchain.chains.history_aware_retriever",
        "isExtraImport": true,
        "detail": "langchain.chains.history_aware_retriever",
        "documentation": {}
    },
    {
        "label": "FireCrawlLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "TextLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "RecursiveJsonSplitter",
        "importPath": "langchain_text_splitters",
        "description": "langchain_text_splitters",
        "isExtraImport": true,
        "detail": "langchain_text_splitters",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain_text_splitters",
        "description": "langchain_text_splitters",
        "isExtraImport": true,
        "detail": "langchain_text_splitters",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "runllm",
        "importPath": "backend.core",
        "description": "backend.core",
        "isExtraImport": true,
        "detail": "backend.core",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "Cohere",
        "importPath": "langchain_community.llms",
        "description": "langchain_community.llms",
        "isExtraImport": true,
        "detail": "langchain_community.llms",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "StrOutputParser",
        "importPath": "langchain_core.output_parsers",
        "description": "langchain_core.output_parsers",
        "isExtraImport": true,
        "detail": "langchain_core.output_parsers",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "BaseCallbackHandler",
        "importPath": "langchain.callbacks.base",
        "description": "langchain.callbacks.base",
        "isExtraImport": true,
        "detail": "langchain.callbacks.base",
        "documentation": {}
    },
    {
        "label": "LLMResult",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "AgentFinish",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "tool",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "AgentExecutor",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "langchain.tools",
        "description": "langchain.tools",
        "isExtraImport": true,
        "detail": "langchain.tools",
        "documentation": {}
    },
    {
        "label": "AgentCallbackHandler",
        "importPath": "callbacks",
        "description": "callbacks",
        "isExtraImport": true,
        "detail": "callbacks",
        "documentation": {}
    },
    {
        "label": "render_text_description",
        "importPath": "langchain.tools.render",
        "description": "langchain.tools.render",
        "isExtraImport": true,
        "detail": "langchain.tools.render",
        "documentation": {}
    },
    {
        "label": "format_log_to_str",
        "importPath": "langchain.agents.format_scratchpad",
        "description": "langchain.agents.format_scratchpad",
        "isExtraImport": true,
        "detail": "langchain.agents.format_scratchpad",
        "documentation": {}
    },
    {
        "label": "ReActSingleInputOutputParser",
        "importPath": "langchain.agents.output_parsers",
        "description": "langchain.agents.output_parsers",
        "isExtraImport": true,
        "detail": "langchain.agents.output_parsers",
        "documentation": {}
    },
    {
        "label": "runllm",
        "kind": 2,
        "importPath": "documentation-helper-chatbot.backend.core",
        "description": "documentation-helper-chatbot.backend.core",
        "peekOfCode": "def runllm(query: str, chat_history: List[Dict[str, any]] = []):\n    embeddings = CohereEmbeddings(\n        model=\"embed-english-v3.0\",\n        cohere_api_key=os.getenv(\"COHERE_API_KEY\"),\n        user_agent=\"LangChain\",\n    )\n    docsearch = PineconeVectorStore(\n        index_name=os.getenv(\"PINECONE_INDEX_NAME\"), embedding=embeddings\n    )\n    chat = ChatCohere(verbose=True, cohere_api_key=os.getenv(\"COHERE_API_KEY\"))",
        "detail": "documentation-helper-chatbot.backend.core",
        "documentation": {}
    },
    {
        "label": "ingest_docs",
        "kind": 2,
        "importPath": "documentation-helper-chatbot.ingestion",
        "description": "documentation-helper-chatbot.ingestion",
        "peekOfCode": "def ingest_docs() -> None:\n    embedding = CohereEmbeddings(\n        model=\"embed-english-v3.0\",\n        cohere_api_key=os.getenv(\"COHERE_API_KEY\"),\n        user_agent=\"LangChain\",\n    )\n    langchian_docs_urls = [\n        \"https://langchain-ai.github.io/langgraph/tutorials/introduction/\",\n    ]\n    for url in langchian_docs_urls:",
        "detail": "documentation-helper-chatbot.ingestion",
        "documentation": {}
    },
    {
        "label": "create_sources_string",
        "kind": 2,
        "importPath": "documentation-helper-chatbot.main",
        "description": "documentation-helper-chatbot.main",
        "peekOfCode": "def create_sources_string(source_url: Set[str]) -> str:\n    if not source_url:\n        return \"\"\n    sources_list = list(source_url)\n    sources_list.sort()\n    sources_string = \"<br><br><div class='source-list'><b>Sources:</b><ul>\"\n    for source in sources_list:\n        sources_string += f\"<li>{source}</li>\"\n    sources_string += \"</ul></div>\"\n    return sources_string",
        "detail": "documentation-helper-chatbot.main",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "documentation-helper-chatbot.main",
        "description": "documentation-helper-chatbot.main",
        "peekOfCode": "prompt = st.chat_input(\"Ask me something about your documentation...\")\nif \"chat_answers_history\" not in st.session_state:\n    st.session_state[\"chat_answers_history\"] = []\n    st.session_state[\"user_prompt_history\"] = []\n    st.session_state[\"chat_history\"] = []\ndef create_sources_string(source_url: Set[str]) -> str:\n    if not source_url:\n        return \"\"\n    sources_list = list(source_url)\n    sources_list.sort()",
        "detail": "documentation-helper-chatbot.main",
        "documentation": {}
    },
    {
        "label": "scrape_linkedin_profile",
        "kind": 2,
        "importPath": "ice_breaker.third_parties.linkedin",
        "description": "ice_breaker.third_parties.linkedin",
        "peekOfCode": "def scrape_linkedin_profile(linkedin_profile_url:str, mock: bool = False):\n    \"\"\"\"Scrape LinkedIn profile information from a given URL.\n    Args:\n        linkedin_profile_url (str): The URL of the LinkedIn profile to scrape.\n        mock (bool): If True, return mock data instead of scraping. Defaults to False.\n    Returns:\n        dict: A dictionary containing the scraped profile information.\n    \"\"\"",
        "detail": "ice_breaker.third_parties.linkedin",
        "documentation": {}
    },
    {
        "label": "information",
        "kind": 5,
        "importPath": "ice_breaker.ice_breaker",
        "description": "ice_breaker.ice_breaker",
        "peekOfCode": "information = \"\"\"\nElon Reeve Musk (/ˈiːlɒn/ EE-lon; born June 28, 1971) is a businessman known for his key roles in Tesla, SpaceX, PayPal, OpenAI and Twitter (which he rebranded as X). Since 2025, he has been a senior advisor to United States president Donald Trump and the de facto head of the Department of Government Efficiency (DOGE). Musk is the wealthiest person in the world; as of March 2025, Forbes estimates his net worth to be $320 billion USD.\nBorn to a wealthy family in Pretoria, South Africa, Musk emigrated in 1989 to Canada, whose citizenship he had inherited through his mother. He graduated from the University of Pennsylvania in the U.S. before moving to California to pursue business ventures. In 1995, Musk co-founded the software company Zip2. Following its sale in 1999, he co-founded X.com, an online payment company that later merged to form PayPal, which was acquired by eBay in 2002 for $1.5 billion. That year, Musk also became a U.S. citizen.\nIn 2002, Musk founded SpaceX and became its CEO and chief engineer. The company has since led innovations in reusable rockets and commercial spaceflight. In 2004, Musk joined Tesla, Inc. as an early investor, and became its CEO and product architect in 2008; it has become a market leader in electric vehicles. In 2015, he co-founded OpenAI to advance artificial intelligence research, but left its board in 2018. In 2016, Musk co-founded Neuralink, a company focused on brain–computer interfaces, and in 2017 launched the Boring Company, which aims to develop tunnel transportation. Musk was named Time magazine's Person of the Year in 2021. In 2022, he acquired Twitter, implementing significant changes and rebranding it as X in 2023. In January 2025, he was appointed head of Trump's newly created DOGE.\nMusk's political activities and views have made him a polarizing figure. He has been criticized for making unscientific and misleading statements, including COVID-19 misinformation and promoting conspiracy theories. His acquisition of Twitter (now X) was controversial due to a subsequent increase in hate speech and the spread of misinformation on the service. He has engaged in political activities in several countries, including as a vocal and financial supporter of Trump. Musk was the largest donor in the 2024 U.S. presidential election and is a supporter of global far-right figures, causes, and political parties.\"\"\"\nif __name__ == \"__main__\":\n    print(\"Hello, World!\")\n    load_dotenv()\n    summary_template = \"\"\"\n    given the information {information} about a person from i want you to create:",
        "detail": "ice_breaker.ice_breaker",
        "documentation": {}
    },
    {
        "label": "AgentCallbackHandler",
        "kind": 6,
        "importPath": "react-langchain.callbacks",
        "description": "react-langchain.callbacks",
        "peekOfCode": "class AgentCallbackHandler(BaseCallbackHandler):\n    def on_llm_start(\n        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any\n    ) -> Any:\n        \"\"\"Runs when LLM starts running.\"\"\"\n        # print(f\"***Prompt to LLM was:***\\n{prompts[0]}\")\n        # print(\"*********\")\n    def on_llm_end(self, response: LLMResult, **kwargs: Any) -> Any:\n        \"\"\"Run when LLM ends running.\"\"\"\n        # print(f\"***LLM Response:***\\n{response.generations[0][0].text}\")",
        "detail": "react-langchain.callbacks",
        "documentation": {}
    },
    {
        "label": "get_text_length",
        "kind": 2,
        "importPath": "react-langchain.main",
        "description": "react-langchain.main",
        "peekOfCode": "def get_text_length(text: str) -> int:\n    \"\"\"Returns the length of the input text.\"\"\"\n    print(f\"get_text_length enter with {text=}\")\n    text = text.strip(\"'\\n\").strip('\"')\n    return len(text)\ndef find_tool_by_name(tools: List[Tool], tool_name: str) -> Tool:\n    for tool in tools:\n        if tool.name == tool_name:\n            return tool\n    raise ValueError(f\"Tool with name {tool_name} not found.\")",
        "detail": "react-langchain.main",
        "documentation": {}
    },
    {
        "label": "find_tool_by_name",
        "kind": 2,
        "importPath": "react-langchain.main",
        "description": "react-langchain.main",
        "peekOfCode": "def find_tool_by_name(tools: List[Tool], tool_name: str) -> Tool:\n    for tool in tools:\n        if tool.name == tool_name:\n            return tool\n    raise ValueError(f\"Tool with name {tool_name} not found.\")\nif __name__ == \"__main__\":\n    # Check if the environment variable is set\n    print(\"Hello React Lnagchain\")\n    tools = [get_text_length]\n    template = \"\"\"",
        "detail": "react-langchain.main",
        "documentation": {}
    }
]